#!/usr/bin/env node

const fs = require('fs');
const cheerio = require('cheerio');
const { fetch } = require('undici');
const ed = require('@noble/ed25519');
const { constants } = require('./common');

if (process.argv.length !== 5) {
  throw new Error('usage: host privKeyHex htmlFile');
}

const [,, host, privKeyHex, htmlFile] = process.argv;
let htmlFileBytes = fs.readFileSync(htmlFile);
const htmlParsed = cheerio.load(htmlFileBytes);
const unmodifiedSince = new Date().toUTCString();

// append meta tag if not present
if (htmlParsed('meta[http-equiv=last-modified]').length === 0) {
  htmlParsed('head').append(`<meta http-equiv="last-modified" content="${unmodifiedSince}">`);
  htmlFileBytes = Buffer.from(htmlParsed.root().html(), 'utf8');
}

ed.sign(htmlFileBytes, privKeyHex).then(async (sigBytes) => {
  const sigHex = Buffer.from(sigBytes).toString('hex');
  const pubKeyHex = Buffer.from(await ed.getPublicKey(privKeyHex)).toString('hex');
  const fetchUri = `${host}/${pubKeyHex}`;
  const fetchRes = await fetch(fetchUri, {
    method: 'PUT',
    headers: {
      'content-type': constants.contentType,
      [constants.headerNames.version]: constants.protocolVersion,
      'if-unmodified-since': unmodifiedSince,
      authorization: `${constants.authorizationPreamble}=${sigHex}`
    },
    body: htmlFileBytes
  });

  if (!fetchRes.ok) {
    console.error(`ERROR: ${fetchRes.status} "${fetchRes.statusText}"`);
  } else {
    console.log(`PUT ${fetchUri} ${fetchRes.status}`);
  }
});
