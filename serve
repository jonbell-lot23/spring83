#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
const routes = require('./server/routes');
const {
  constants,
  findKnownKeys
} = require('./common');
const {
  ttlKiller,
  refreshPubBoards
} = require('./server/content');

const app = require('fastify')({ logger: true });
app.register(require('@fastify/cors'), constants.corsOptions);

async function main () {
  const contentDir = path.resolve(process.env.SPRING83_CONTENT_DIR || path.join(__dirname, constants.defaultContentPath));
  const fqdn = process.env.SPRING83_FQDN || constants.defaultFQDN;
  const contactAddr = process.env.SPRING83_CONTACT_ADDR;

  await fs.promises.mkdir(contentDir, { recursive: true });
  const knownKeys = await findKnownKeys(contentDir);
  await ttlKiller(knownKeys, contentDir, app);
  await refreshPubBoards(contentDir);

  ['SIGINT', 'SIGTERM'].forEach((sig) => process.on(sig, () => {
    app.log.info('Stopping...');
    process.exit(0);
  }));

  const listenSpec = {
    port: process.env.SPRING83_BIND_PORT || 1783,
    host: process.env.SPRING83_BIND_HOST || '0.0.0.0'
  };

  app.addContentTypeParser('text/html', { parseAs: 'string' }, (req, body, done) => done(null, body));
  await routes.attach(app, knownKeys, fqdn, contentDir, contactAddr);
  await app.listen(listenSpec);

  app.log.info(`Found ${Object.keys(knownKeys).length} pre-existing boards in ${contentDir}`);
  app.log.info(`Listening on ${listenSpec.host}:${listenSpec.port} with FQDN ${fqdn}`);
}

main();
