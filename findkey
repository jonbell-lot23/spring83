#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const ed = require('@noble/ed25519');
const { pubKeyIsValid } = require('./common');

async function findMatchingKey (strict, rounds = 0, matchedResolver) {
  const next = findMatchingKey.bind(null, strict, rounds + 1);

  if (rounds === 0) {
    return new Promise((resolve) => next(resolve));
  }

  const privateKey = ed.utils.randomPrivateKey();
  const publicKey = await ed.getPublicKey(privateKey);

  if (pubKeyIsValid(publicKey, strict)) {
    return matchedResolver({ rounds, matched: { privateKey, publicKey } });
  }

  setTimeout(next.bind(null, matchedResolver), 0);
}

async function main () {
  const start = Number(new Date());

  ['SIGINT', 'SIGHUP'].forEach(sig => process.on(sig, () => process.exit()));

  const { rounds, matched } = await findMatchingKey(process.argv.length > 2 && process.argv[2] === '--strict');
  const outLines = Object.entries(matched).map(([type, keyData]) => [type, Buffer.from(keyData).toString('hex')].join(' '));

  outLines.push(rounds);
  outLines.push(Number(new Date()) - start);

  const outStr = outLines.join('\n');
  const outFileName = path.join(__dirname, Buffer.from(matched.publicKey).toString('hex').slice(0, 16) + '.txt');

  console.log(outStr);
  await fs.promises.writeFile(outFileName, outStr);
  console.log(`\nWrote: ${outFileName}`);
}

main();
