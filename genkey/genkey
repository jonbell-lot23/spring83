#!/usr/bin/env node

const ed = require('@noble/ed25519');

const KEY_MATCH_RX = /ed20(\d{2})$/;

function pubKeyIsValid (pubKeyData) {
  const match = Buffer.from(pubKeyData).toString('hex').match(KEY_MATCH_RX);

  if (match && match.length === 2) {
    const lastTwoDigitsNum = Number.parseInt(match[1]);

    if (Number.isNaN(lastTwoDigitsNum)) {
      return false;
    }

    // "Furthermore, the final four characters, interpreted as a decimal number, must fall in the range 2022 .. 2099."
    if (lastTwoDigitsNum < 22) {
      return false;
    }

    return true;
  }

  return false;
}

async function findMatchingKey (rounds = 0, matchedResolver) {
  const next = findMatchingKey.bind(null, rounds + 1);

  if (rounds === 0) {
    return new Promise((resolve) => next(resolve));
  }

  const privateKey = ed.utils.randomPrivateKey();
  const publicKey = await ed.getPublicKey(privateKey);

  if (pubKeyIsValid(publicKey)) {
    return matchedResolver({ rounds, matched: { privateKey, publicKey } });
  }

  setTimeout(next.bind(null, matchedResolver), 0);
}

async function main () {
  const start = Number(new Date());

  ['SIGINT', 'SIGHUP'].forEach(sig => process.on(sig, () => process.exit()));

  const { rounds, matched } = await findMatchingKey();

  for (const [type, keyData] of Object.entries(matched)) {
    console.log(type, Buffer.from(keyData).toString('hex'));
  }

  console.log(rounds);
  console.log(Number(new Date()) - start);
}

if (require.main === module) {
  main();
} else {
  module.exports = {
    pubKeyIsValid,
    findMatchingKey
  };
}
